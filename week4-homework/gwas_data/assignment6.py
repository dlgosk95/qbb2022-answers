#!/usr/bin/env python
import numpy as np
import matplotlib.pyplot as plt
from vcfParser import *


association = np.genfromtxt("output_CB1908.assoc.linear", dtype = None, encoding = None, names = ["chr", "snp", "bp", "a1", "test", "nmiss", "beta", "stat", "pvalue"])

min_var = ''
min_pval = 1
for i in association[1:]:
    var_id = i[1]
    var_pval = float(i[8])
    if var_pval < min_pval :
        min_var = var_id
        min_pval = var_pval

# print (min_var) # rs10876043
# print (min_pval) # 8.199e-12

## make dictionary {genotype 00/01/11/no info, IC50 values}
## retrieve genotypes of most associated SNPs
## match to IC50 of patients 175

parsed = parse_vcf('genotypes.vcf')

# print(parsed[:4])
## 0 is header
## ['1', 558185, 'rs9699599', 'A', 'G', '.', '.', {'PR': None}, 'GT', '0/0', '0/0', '0/0', '0/1', '0/0', '0/1', './.', '0/0', '0/0', '0/0', '0/1', '0/0', '0/0', '0/0', '0/0', '0/1', '0/0', '0/1', '0/0', '0/0', '0/0', '0/0', '0/0', '0/0', '0/0', './.', '0/0', '0/0', '0/0', '0/0', '0/1', '0/0', '0/1', '0/1', '0/0', '0/1', './.', '0/1', '0/1', '0/0', '0/0', '0/0', '0/0', '0/0', '0/0', '0/0', '0/0', '0/0', '0/0', '0/0', '0/0', '0/0', '0/0', '0/0', '0/0', '0/0', '0/0', '0/0', '0/0', '0/0', '0/0', '0/0', '0/0', '0/1', '0/0', '0/1', '0/0', '0/0', '0/0', '0/1', '0/0', '0/1', '0/0', '0/0', '0/0', './.', '0/0', '0/0', '0/0', '0/1', '0/0', '0/1', '0/0', '0/1', '0/0', '0/1', '0/0', '0/0', '0/1', '0/0', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.', './.']
## starting from 1, 2 is the snp id, after 9 is genotype of each patient

genotype_dict = {}
patient_ids = parsed[0][9:]
# print(patient_ids)


for line in parsed[1:]:
    snp_id = line[2]
    # print(snp_id)
    if snp_id == min_var:
        patient_genotypes = line[9:]
        break
# print(patient_genotypes)

## I want {patient_ID : genotypes}
for i in range(len(patient_ids)):
    genotype_dict[patient_ids[i]] = patient_genotypes[i]
# print(genotype_dict)
# {'1001_1001': '0/1', '1002_1002': '0/1', '1003_1003': './.', '1004_1004': '0/1', '1005_1005': '0/1', '1006_1006': '0/1', '1007_1007': '1/1', '1008_1008': '1/1', '1009_1009': '0/1', '1010_1010': '0/1', '1011_1011': '1/1', '1012_1012': '0/1', '1013_1013': '0/1', '1014_1014': '0/1', '1015_1015': '0/1', '1016_1016': './.', '1017_1017': './.', '1018_1018': './.', '1019_1019': '0/1', '1020_1020': '0/1', '1021_1021': '0/1', '1022_1022': '0/1', '1023_1023': '0/1', '1024_1024': '0/1', '1025_1025': '0/1', '1026_1026': './.', '1027_1027': '0/1', '1028_1028': '0/1', '1029_1029': '0/1', '1030_1030': '0/1', '1031_1031': '1/1', '1032_1032': '1/1', '1033_1033': '0/1', '1034_1034': '0/1', '1035_1035': './.', '1036_1036': '0/1', '1037_1037': '0/1', '1038_1038': '0/1', '1039_1039': '0/1', '1040_1040': '0/1', '1041_1041': '0/1', '1042_1042': '0/1', '1043_1043': '0/1', '1044_1044': '0/1', '1045_1045': '0/1', '1046_1046': '0/1', '1047_1047': '0/1', '1048_1048': '0/1', '1049_1049': './.', '1050_1050': '0/1', '1051_1051': '0/1', '1052_1052': '0/1', '1053_1053': '0/1', '1054_1054': '0/1', '1055_1055': '0/1', '1056_1056': '0/1', '1057_1057': '0/1', '1058_1058': '0/1', '1059_1059': '0/1', '1060_1060': '0/1', '1061_1061': '0/1', '1062_1062': '0/1', '1063_1063': '0/1', '1064_1064': '0/1', '1065_1065': '0/1', '1066_1066': '0/1', '1067_1067': '0/1', '1068_1068': '0/1', '1069_1069': '0/1', '1070_1070': '1/1', '1071_1071': '0/1', '1072_1072': '1/1', '1073_1073': './.', '1074_1074': '0/1', '1075_1075': '0/1', '1076_1076': '0/1', '1077_1077': '0/1', '1078_1078': '0/1', '1079_1079': '0/1', '1080_1080': '0/1', '1081_1081': '0/1', '1082_1082': './.', '1083_1083': '0/1', '1084_1084': '0/1', '1085_1085': '0/1', '1086_1086': '0/1', '1087_1087': './.', '1088_1088': '0/1', '1089_1089': '1/1', '1090_1090': '0/1', '1091_1091': '0/0', '1092_1092': '0/0', '1093_1093': '0/0', '1094_1094': '0/0', '1095_1095': '0/0', '1096_1096': '0/0', '1097_1097': '0/0', '1098_1098': '0/0', '1099_1099': '0/0', '1100_1100': '0/0', '1101_1101': '0/0', '1102_1102': '0/0', '1103_1103': '0/0', '1104_1104': '0/0', '1105_1105': '0/0', '1106_1106': '0/0', '1107_1107': '0/0', '1108_1108': '0/0', '1109_1109': '0/0', '1110_1110': '0/0', '1111_1111': '0/0', '1112_1112': './.', '1113_1113': './.', '1114_1114': '0/0', '1115_1115': '0/0', '1116_1116': '0/0', '1117_1117': '0/0', '1118_1118': '0/0', '1119_1119': '0/0', '1120_1120': '0/0', '1121_1121': '0/0', '1122_1122': '0/0', '1123_1123': '0/0', '1124_1124': '0/0', '1125_1125': '0/0', '1126_1126': '0/0', '1127_1127': '0/0', '1128_1128': '0/0', '1129_1129': '0/0', '1130_1130': '0/0', '1131_1131': '0/1', '1132_1132': '0/0', '1133_1133': '0/0', '1134_1134': '0/0', '1135_1135': '0/0', '1136_1136': '0/0', '1137_1137': '0/0', '1138_1138': '0/0', '1139_1139': '0/0', '1140_1140': './.', '1141_1141': '0/0', '1142_1142': '0/0', '1143_1143': '0/0', '1144_1144': '0/0', '1145_1145': '0/0', '1146_1146': '0/0', '1147_1147': '0/0', '1148_1148': '0/0', '1149_1149': '0/0', '1150_1150': '0/0', '1151_1151': '0/0', '1152_1152': '0/0', '1153_1153': '0/0', '1154_1154': '0/0', '1155_1155': '0/0', '1156_1156': '0/0', '1157_1157': '0/0', '1158_1158': '0/0', '1159_1159': '0/0', '1160_1160': '0/0', '1161_1161': '0/0', '1162_1162': '0/0', '1163_1163': '0/0', '1164_1164': '0/0', '1165_1165': '0/0', '1166_1166': '0/0', '1167_1167': '0/0', '1168_1168': '0/0', '1169_1169': '0/0', '1170_1170': '0/0', '1171_1171': '0/0', '1172_1172': '0/0', '1173_1173': '0/0', '1174_1174': '0/0', '1175_1175': '0/0', '1176_1176': '0/0'}

## I want {pateint_ID : IC 50}
phenotype = np.genfromtxt("CB1908_IC50.txt", dtype = None, encoding = None, names = ["FID", "IID", "IC50"])
phenotype_dict = {}
for line in phenotype[1:]:
    patient_id = line["FID"]+"_"+line["IID"]
    # print(patient_id) # 1001_1001
    try:
        phenotype_dict[patient_id] = float(line["IC50"])
        # ValueError: could not convert string to float: 'NA'
    except:
        phenotype_dict[patient_id] = None
# print (phenotype_dict)
# {'1001_1001': 6.927465594, '1002_1002': 11.88728968, '1003_1003': 12.18924303, '1004_1004': 11.95346787, '1005_1005': 8.836499122, '1006_1006': 8.153960118, '1007_1007': 10.23771873, '1008_1008': 9.354080993, '1009_1009': 9.596693723, '1010_1010': 6.272276985, '1011_1011': 9.962993694, '1012_1012': 6.355427097, '1013_1013': 6.191365418, '1014_1014': 8.115864905, '1015_1015': 7.637110778, '1016_1016': 6.799138511, '1017_1017': 8.344191918, '1018_1018': 3.345458436, '1019_1019': 7.97508359, '1020_1020': None, '1021_1021': 7.032349489, '1022_1022': 5.751398414, '1023_1023': 6.7394316, '1024_1024': 5.790128517, '1025_1025': 7.134384401, '1026_1026': 6.879968695, '1027_1027': 5.442729589, '1028_1028': 6.442158785, '1029_1029': 6.21293642, '1030_1030': 12.59583597, '1031_1031': 10.96563817, '1032_1032': 7.118429984, '1033_1033': 5.932350589, '1034_1034': 10.92404283, '1035_1035': 8.618631976, '1036_1036': 10.91598423, '1037_1037': 6.160189195, '1038_1038': 9.146633095, '1039_1039': 10.32013623, '1040_1040': 9.252982231, '1041_1041': 7.325145319, '1042_1042': None, '1043_1043': 8.765233418, '1044_1044': 10.32392128, '1045_1045': 9.40357222, '1046_1046': 7.778176975, '1047_1047': 11.07849929, '1048_1048': 5.604878388, '1049_1049': 10.97003384, '1050_1050': 6.977852204, '1051_1051': 5.385953112, '1052_1052': 9.314439199, '1053_1053': 11.69534853, '1054_1054': 8.352128396, '1055_1055': 13.02082541, '1056_1056': 6.711429987, '1057_1057': 8.493642288, '1058_1058': 10.15762111, '1059_1059': 4.003030729, '1060_1060': 10.7320202, '1061_1061': 5.332106996, '1062_1062': 6.925389915, '1063_1063': 7.987904089, '1064_1064': 11.04614282, '1065_1065': 8.726731202, '1066_1066': 7.045170006, '1067_1067': 9.665069726, '1068_1068': 8.702962383, '1069_1069': 8.128685384, '1070_1070': 13.00120799, '1071_1071': 9.104386476, '1072_1072': 8.890182408, '1073_1073': 7.036989305, '1074_1074': 3.74476444, '1075_1075': 6.877282508, '1076_1076': 5.470202082, '1077_1077': 7.726121688, '1078_1078': 5.222070485, '1079_1079': 8.036866182, '1080_1080': 6.77032289, '1081_1081': 6.124536008, '1082_1082': 7.77654899, '1083_1083': 9.485704792, '1084_1084': 9.859208699, '1085_1085': 6.126245409, '1086_1086': 10.29302999, '1087_1087': 5.228566207, '1088_1088': 5.824170016, '1089_1089': 7.062508215, '1090_1090': 7.108173621, '1091_1091': 9.214520671, '1092_1092': 5.882411704, '1093_1093': 7.024901421, '1094_1094': 7.978502393, '1095_1095': 5.083877685, '1096_1096': 4.859545101, '1097_1097': 7.9357674, '1098_1098': 3.002607025, '1099_1099': 7.900907825, '1100_1100': 5.199353767, '1101_1101': 5.838089388, '1102_1102': 4.655031984, '1103_1103': 4.381403459, '1104_1104': 6.871879556, '1105_1105': 3.471881146, '1106_1106': 6.688271722, '1107_1107': 5.290562466, '1108_1108': 5.05915244, '1109_1109': 3.151105289, '1110_1110': 7.921786943, '1111_1111': 3.9933506, '1112_1112': 6.323949734, '1113_1113': 3.499082355, '1114_1114': 5.379115514, '1115_1115': 5.986440915, '1116_1116': 6.778259407, '1117_1117': 5.530967215, '1118_1118': 6.254857385, '1119_1119': 7.215670452, '1120_1120': 6.774791751, '1121_1121': 9.343091977, '1122_1122': 7.704510026, '1123_1123': 4.490398431, '1124_1124': 7.308824594, '1125_1125': 6.503046007, '1126_1126': 4.419228628, '1127_1127': 5.108257002, '1128_1128': 4.221031894, '1129_1129': 6.792789278, '1130_1130': 5.274964192, '1131_1131': 6.907481918, '1132_1132': 4.432046846, '1133_1133': 7.258275212, '1134_1134': 7.333912078, '1135_1135': 7.159089325, '1136_1136': 6.381597202, '1137_1137': 4.862449344, '1138_1138': 6.123477813, '1139_1139': 4.891448087, '1140_1140': 6.964156628, '1141_1141': 10.23051482, '1142_1142': 4.358214641, '1143_1143': 5.474280237, '1144_1144': 10.93979372, '1145_1145': 4.376321357, '1146_1146': 8.335929813, '1147_1147': 5.697918596, '1148_1148': 4.476186013, '1149_1149': 5.054482115, '1150_1150': 7.886438999, '1151_1151': 6.484608879, '1152_1152': 5.653718412, '1153_1153': 6.662264401, '1154_1154': 8.860227179, '1155_1155': 5.600157182, '1156_1156': 6.800888601, '1157_1157': 7.137640407, '1158_1158': 5.35576389, '1159_1159': 10.1986874, '1160_1160': 4.443463201, '1161_1161': 5.651764807, '1162_1162': 6.642484197, '1163_1163': 9.055302274, '1164_1164': 4.947614107, '1165_1165': 6.538699218, '1166_1166': 6.324535782, '1167_1167': 5.096423477, '1168_1168': 4.795746133, '1169_1169': 6.134792384, '1170_1170': 6.389370903, '1171_1171': 5.995354205, '1172_1172': 5.877558244, '1173_1173': 5.606679377, '1174_1174': 7.102231422, '1175_1175': 6.777682195, '1176_1176': 4.742201188}

## I want {genotypes : IC 50 multiple values}
# gen_phen_dict = {}
# for d in (genotype_dict, phenotype_dict):
#      for key, value in d.items():
#          gen_phen_dict[key].append(value)
# print (gen_phen_dict) # KeyError: '1001_1001'

# ds = [genotype_dict, phenotype_dict]
# d = {}
# for k in genotype_dict.keys():
#   d[ds[0][k]] = ds[1][k]
# print(d) #{'0/1': 6.907481918, './.': 6.964156628, '1/1': 7.062508215, '0/0': 4.742201188}

# ds = [genotype_dict, phenotype_dict]
# d = {}
# for k in genotype_dict.keys():
#   d[k] = tuple(d[k] for d in ds)
# print(d)
# #{'1001_1001': ('0/1', 6.927465594), '1002_1002': ('0/1', 11.88728968), '1003_1003': ('./.', 12.18924303), '1004_1004': ('0/1', 11.95346787), '1005_1005': ('0/1', 8.836499122), '1006_1006': ('0/1', 8.153960118), '1007_1007': ('1/1', 10.23771873), '1008_1008': ('1/1', 9.354080993), '1009_1009': ('0/1', 9.596693723), '1010_1010': ('0/1', 6.272276985), '1011_1011': ('1/1', 9.962993694), '1012_1012': ('0/1', 6.355427097), '1013_1013': ('0/1', 6.191365418), '1014_1014': ('0/1', 8.115864905), '1015_1015': ('0/1', 7.637110778), '1016_1016': ('./.', 6.799138511), '1017_1017': ('./.', 8.344191918), '1018_1018': ('./.', 3.345458436), '1019_1019': ('0/1', 7.97508359), '1020_1020': ('0/1', None), '1021_1021': ('0/1', 7.032349489), '1022_1022': ('0/1', 5.751398414), '1023_1023': ('0/1', 6.7394316), '1024_1024': ('0/1', 5.790128517), '1025_1025': ('0/1', 7.134384401), '1026_1026': ('./.', 6.879968695), '1027_1027': ('0/1', 5.442729589), '1028_1028': ('0/1', 6.442158785), '1029_1029': ('0/1', 6.21293642), '1030_1030': ('0/1', 12.59583597), '1031_1031': ('1/1', 10.96563817), '1032_1032': ('1/1', 7.118429984), '1033_1033': ('0/1', 5.932350589), '1034_1034': ('0/1', 10.92404283), '1035_1035': ('./.', 8.618631976), '1036_1036': ('0/1', 10.91598423), '1037_1037': ('0/1', 6.160189195), '1038_1038': ('0/1', 9.146633095), '1039_1039': ('0/1', 10.32013623), '1040_1040': ('0/1', 9.252982231), '1041_1041': ('0/1', 7.325145319), '1042_1042': ('0/1', None), '1043_1043': ('0/1', 8.765233418), '1044_1044': ('0/1', 10.32392128), '1045_1045': ('0/1', 9.40357222), '1046_1046': ('0/1', 7.778176975), '1047_1047': ('0/1', 11.07849929), '1048_1048': ('0/1', 5.604878388), '1049_1049': ('./.', 10.97003384), '1050_1050': ('0/1', 6.977852204), '1051_1051': ('0/1', 5.385953112), '1052_1052': ('0/1', 9.314439199), '1053_1053': ('0/1', 11.69534853), '1054_1054': ('0/1', 8.352128396), '1055_1055': ('0/1', 13.02082541), '1056_1056': ('0/1', 6.711429987), '1057_1057': ('0/1', 8.493642288), '1058_1058': ('0/1', 10.15762111), '1059_1059': ('0/1', 4.003030729), '1060_1060': ('0/1', 10.7320202), '1061_1061': ('0/1', 5.332106996), '1062_1062': ('0/1', 6.925389915), '1063_1063': ('0/1', 7.987904089), '1064_1064': ('0/1', 11.04614282), '1065_1065': ('0/1', 8.726731202), '1066_1066': ('0/1', 7.045170006), '1067_1067': ('0/1', 9.665069726), '1068_1068': ('0/1', 8.702962383), '1069_1069': ('0/1', 8.128685384), '1070_1070': ('1/1', 13.00120799), '1071_1071': ('0/1', 9.104386476), '1072_1072': ('1/1', 8.890182408), '1073_1073': ('./.', 7.036989305), '1074_1074': ('0/1', 3.74476444), '1075_1075': ('0/1', 6.877282508), '1076_1076': ('0/1', 5.470202082), '1077_1077': ('0/1', 7.726121688), '1078_1078': ('0/1', 5.222070485), '1079_1079': ('0/1', 8.036866182), '1080_1080': ('0/1', 6.77032289), '1081_1081': ('0/1', 6.124536008), '1082_1082': ('./.', 7.77654899), '1083_1083': ('0/1', 9.485704792), '1084_1084': ('0/1', 9.859208699), '1085_1085': ('0/1', 6.126245409), '1086_1086': ('0/1', 10.29302999), '1087_1087': ('./.', 5.228566207), '1088_1088': ('0/1', 5.824170016), '1089_1089': ('1/1', 7.062508215), '1090_1090': ('0/1', 7.108173621), '1091_1091': ('0/0', 9.214520671), '1092_1092': ('0/0', 5.882411704), '1093_1093': ('0/0', 7.024901421), '1094_1094': ('0/0', 7.978502393), '1095_1095': ('0/0', 5.083877685), '1096_1096': ('0/0', 4.859545101), '1097_1097': ('0/0', 7.9357674), '1098_1098': ('0/0', 3.002607025), '1099_1099': ('0/0', 7.900907825), '1100_1100': ('0/0', 5.199353767), '1101_1101': ('0/0', 5.838089388), '1102_1102': ('0/0', 4.655031984), '1103_1103': ('0/0', 4.381403459), '1104_1104': ('0/0', 6.871879556), '1105_1105': ('0/0', 3.471881146), '1106_1106': ('0/0', 6.688271722), '1107_1107': ('0/0', 5.290562466), '1108_1108': ('0/0', 5.05915244), '1109_1109': ('0/0', 3.151105289), '1110_1110': ('0/0', 7.921786943), '1111_1111': ('0/0', 3.9933506), '1112_1112': ('./.', 6.323949734), '1113_1113': ('./.', 3.499082355), '1114_1114': ('0/0', 5.379115514), '1115_1115': ('0/0', 5.986440915), '1116_1116': ('0/0', 6.778259407), '1117_1117': ('0/0', 5.530967215), '1118_1118': ('0/0', 6.254857385), '1119_1119': ('0/0', 7.215670452), '1120_1120': ('0/0', 6.774791751), '1121_1121': ('0/0', 9.343091977), '1122_1122': ('0/0', 7.704510026), '1123_1123': ('0/0', 4.490398431), '1124_1124': ('0/0', 7.308824594), '1125_1125': ('0/0', 6.503046007), '1126_1126': ('0/0', 4.419228628), '1127_1127': ('0/0', 5.108257002), '1128_1128': ('0/0', 4.221031894), '1129_1129': ('0/0', 6.792789278), '1130_1130': ('0/0', 5.274964192), '1131_1131': ('0/1', 6.907481918), '1132_1132': ('0/0', 4.432046846), '1133_1133': ('0/0', 7.258275212), '1134_1134': ('0/0', 7.333912078), '1135_1135': ('0/0', 7.159089325), '1136_1136': ('0/0', 6.381597202), '1137_1137': ('0/0', 4.862449344), '1138_1138': ('0/0', 6.123477813), '1139_1139': ('0/0', 4.891448087), '1140_1140': ('./.', 6.964156628), '1141_1141': ('0/0', 10.23051482), '1142_1142': ('0/0', 4.358214641), '1143_1143': ('0/0', 5.474280237), '1144_1144': ('0/0', 10.93979372), '1145_1145': ('0/0', 4.376321357), '1146_1146': ('0/0', 8.335929813), '1147_1147': ('0/0', 5.697918596), '1148_1148': ('0/0', 4.476186013), '1149_1149': ('0/0', 5.054482115), '1150_1150': ('0/0', 7.886438999), '1151_1151': ('0/0', 6.484608879), '1152_1152': ('0/0', 5.653718412), '1153_1153': ('0/0', 6.662264401), '1154_1154': ('0/0', 8.860227179), '1155_1155': ('0/0', 5.600157182), '1156_1156': ('0/0', 6.800888601), '1157_1157': ('0/0', 7.137640407), '1158_1158': ('0/0', 5.35576389), '1159_1159': ('0/0', 10.1986874), '1160_1160': ('0/0', 4.443463201), '1161_1161': ('0/0', 5.651764807), '1162_1162': ('0/0', 6.642484197), '1163_1163': ('0/0', 9.055302274), '1164_1164': ('0/0', 4.947614107), '1165_1165': ('0/0', 6.538699218), '1166_1166': ('0/0', 6.324535782), '1167_1167': ('0/0', 5.096423477), '1168_1168': ('0/0', 4.795746133), '1169_1169': ('0/0', 6.134792384), '1170_1170': ('0/0', 6.389370903), '1171_1171': ('0/0', 5.995354205), '1172_1172': ('0/0', 5.877558244), '1173_1173': ('0/0', 5.606679377), '1174_1174': ('0/0', 7.102231422), '1175_1175': ('0/0', 6.777682195), '1176_1176': ('0/0', 4.742201188)}

ds = [genotype_dict, phenotype_dict]
d = {'0/0':[], '0/1':[], '1/1':[]}
for key, value in genotype_dict.items():
    if phenotype_dict[key] is not None:
        if genotype_dict[key] == '0/1':
            d['0/1'].append(phenotype_dict[key]) 
        # elif genotype_dict[key] == './.':
        #     if phenotype_dict[key] is not None:
        #         d['./.'].append(phenotype_dict[key])
        elif genotype_dict[key] == '1/1':
            d['1/1'].append(phenotype_dict[key])
        elif genotype_dict[key] == '0/0':
            d['0/0'].append(phenotype_dict[key])
# print(d)
# {'0/1': [6.927465594, 11.88728968, 11.95346787, 8.836499122, 8.153960118, 9.596693723, 6.272276985, 6.355427097, 6.191365418, 8.115864905, 7.637110778, 7.97508359, 7.032349489, 5.751398414, 6.7394316, 5.790128517, 7.134384401, 5.442729589, 6.442158785, 6.21293642, 12.59583597, 5.932350589, 10.92404283, 10.91598423, 6.160189195, 9.146633095, 10.32013623, 9.252982231, 7.325145319, 8.765233418, 10.32392128, 9.40357222, 7.778176975, 11.07849929, 5.604878388, 6.977852204, 5.385953112, 9.314439199, 11.69534853, 8.352128396, 13.02082541, 6.711429987, 8.493642288, 10.15762111, 4.003030729, 10.7320202, 5.332106996, 6.925389915, 7.987904089, 11.04614282, 8.726731202, 7.045170006, 9.665069726, 8.702962383, 8.128685384, 9.104386476, 3.74476444, 6.877282508, 5.470202082, 7.726121688, 5.222070485, 8.036866182, 6.77032289, 6.124536008, 9.485704792, 9.859208699, 6.126245409, 10.29302999, 5.824170016, 7.108173621, 6.907481918], './.': [12.18924303, 6.799138511, 8.344191918, 3.345458436, 6.879968695, 8.618631976, 10.97003384, 7.036989305, 7.77654899, 5.228566207, 6.323949734, 3.499082355, 6.964156628], '1/1': [10.23771873, 9.354080993, 9.962993694, 10.96563817, 7.118429984, 13.00120799, 8.890182408, 7.062508215], '0/0': [9.214520671, 5.882411704, 7.024901421, 7.978502393, 5.083877685, 4.859545101, 7.9357674, 3.002607025, 7.900907825, 5.199353767, 5.838089388, 4.655031984, 4.381403459, 6.871879556, 3.471881146, 6.688271722, 5.290562466, 5.05915244, 3.151105289, 7.921786943, 3.9933506, 5.379115514, 5.986440915, 6.778259407, 5.530967215, 6.254857385, 7.215670452, 6.774791751, 9.343091977, 7.704510026, 4.490398431, 7.308824594, 6.503046007, 4.419228628, 5.108257002, 4.221031894, 6.792789278, 5.274964192, 4.432046846, 7.258275212, 7.333912078, 7.159089325, 6.381597202, 4.862449344, 6.123477813, 4.891448087, 10.23051482, 4.358214641, 5.474280237, 10.93979372, 4.376321357, 8.335929813, 5.697918596, 4.476186013, 5.054482115, 7.886438999, 6.484608879, 5.653718412, 6.662264401, 8.860227179, 5.600157182, 6.800888601, 7.137640407, 5.35576389, 10.1986874, 4.443463201, 5.651764807, 6.642484197, 9.055302274, 4.947614107, 6.538699218, 6.324535782, 5.096423477, 4.795746133, 6.134792384, 6.389370903, 5.995354205, 5.877558244, 5.606679377, 7.102231422, 6.777682195, 4.742201188]}





fig, ax = plt.subplots(1)
labels, data = d.keys(), d.values()
## print(labels) # dict_keys(['0/1', './.', '1/1', '0/0'])
# print (data) # dict_values([[6.927465594, ..., 4.742201188]])
plt.xlabel("Genotype")
plt.ylabel("IC50")
plt.boxplot(data)
plt.xticks(range(1, len(labels) + 1), labels)
plt.savefig("boxplot.png")
plt.show()
plt.close()
